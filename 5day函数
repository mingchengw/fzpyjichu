#5-1
#函数 具有特定功能的代码模块就是函数
#定义一个函数
'''
def func():
    print("hello")
#调用函数
func()
'''
#定义函数时写的参数叫形参（形式上的参数），调用函数时传递的参数叫实参（实际的参数）
# def func(name):
#     print(name)
# #调用函数
# func("小怪")

#形参又分为 普通参数，默认参数，收集参数，命名关键字参数，关键字收集参数
'''
def func(name,age=18,*like):
    print(name)
    print(age)
    print(like)
#调用函数
func("小明",19,"抽烟","喝酒","烫头")
'''

#* 命名关键字参数
#关键字收集参数
'''
def func(name,*,like,**eat):
    print(name)
    print(like)
    print(eat)
func("小张",like="吃炸鸡，喝啤酒",drink="喝点小旺仔",tian="饭前甜点烧烤榴莲",dinner="鱼香肉丝盖榴莲")
'''
'''
def yunsuan(*arg):
    n = 0
    for num in arg:
        print(num+n)
        n += num
yunsuan(1,2,3,4,5,6,7,9,10)
'''
#int()  float() bool() complex(),list(),str(),tuple(),set(),dict(),id()...... 都是函数
#help()查看函数的文档
#help(print)
#__doc__
#函数的功能查看
#print(float.__doc__)

def func(name,age=18,**arg):
    '''
    这个函数的功能是干嘛的？
    :param name: 写出你的名字
    写出你的年龄（可选）
    写出其他的资料
    函数的返回值是什么
    '''
    pass

func("小明")

help(func)


#5-1wp
# def func():
#     print('hello')
# func()

# def func(name):
#     print(name)
# func("wp")

# def func(name,age=18,*like):   #*like收集参数
#     print(name)
#     print(age)
#     print(like)
# func("小明",19,"抽烟","喝酒","烫头")

# def func(name,*,like,**eat):   #**eat关键字收集参数
#     print(name)
#     print(like)
#     print(eat)
# func("小张",like="吃炸鸡，喝啤酒",drink="喝点小旺仔",tian="饭前甜点烧烤榴莲",dinner="鱼香肉丝盖榴莲")

# def yunsuan(*arg):
#     n = 0
#     for num in arg:
#         print(num+n)
#         n += num
# yunsuan(1,2,3,4,5,6,7,9,10)

#help()查看函数的文档
#函数的功能查看
#print(float.__doc__)





#5-2
#具有返回值的函数
#执行过程函数，具有返回值的函数
#return

#执行过程函数
'''
def func(num1,num2):
    print(num1 + num2)
result = func(2,3)
print(result)
'''
#具有返回值的函数

def func(num1,num2):
    print(num1+num2)
    return [1,2,3,4,5]
result = func(2,3)
print(result)

'''
result = print("你好")
print(result)
'''

#return：结束函数
'''
def func():
    print("你好")
    print("美女")
    return "再见"
    print("请问你有火机吗？")
    print("那你是怎么点燃我的")
liaomei = func()
print(liaomei)
'''
#执行过程函数
'''
say = print("你好")
print(say)
'''

#id 具有返回值的函数
# result = id(1)
# print(result)





#5-2wp
# #执行过程函数
# def func(num1,num2):
#     print(num1 + num2)
# result = func(2,3)
# print(result) #输出结果：None


#具有返回值的函数
# def func(num1,num2):
#     print(num1+num2)
#     return [1,2,3,4,5]
# result = func(2,3)  #输出结果5
# print(result)  #输出结果[1, 2, 3, 4, 5]
# func(10,20)    #输出结果30


# #return：结束函数
# def func():
#     print("你好")
#     print("美女")
#     return "再见"
#     print("请问你有火机吗？")
#     print("那你是怎么点燃我的")
# liaomei = func()
# print(liaomei)
# #执行结果
# # 你好
# # 美女
# # 再见

# #执行过程函数
# say = print("你好")
# print(say)


# #id 具有返回值的函数
# result = id(1)
# print(result)






#5-3
#变量的作用域
#num1是全局变量
#全局变量在函数内外都可以使用，有效范围可以层层传递
#局部变量仅在函数内部可以使用,有效范围只能一层一层往下传递
'''
num1 = 1
def func():
    #局部变量
    num2 = 2
    def func1():
        num3 = 3
        print(num1)
    func1()
    #print(num3)
    #print(num2)
    #print(num1)
func()
#print(num1)
'''
'''
num1 = 3
def out():
    num1 = 1
    def inner():
        num1 = 2
        print(num1)
    inner()
    print(num1)
out()
print(num1)
'''

# num1 = 1 #伪全局变量
# def out():
#     print(num1)
#     # num1 += 1
#     # print(num1)
# #调用函数
# out()
# num1 += 1
# print(num1)


#真正的全局变量
'''
num1 = 1 #全局变量
def out():
    global num1
    num1 += 9
    print(num1)
#调用函数
out()
'''
'''
def func():
    global num1 #全局变量
    num1 = 1

#调用函数
func()
print(num1+2)
'''
#global之后的变量在哪里都可以使用
'''
def out():
    def inner():
        global num1
        num1 = 1
    inner()
    print(num1+2)
#调用外层函数
out()
print(num1)
'''

#global关键字
'''
num1 = 1
def out():
    num1 = 2
    def inner():
        global num1
        num1 = 3
    inner()
    print(num1)
#调用外层函数
out()
print(num1)
'''
#nonlocal关键字只是对上一层变量进行更改，提升为相对全局变量
'''
num1 = 4
def out():
    num1 = 1
    def middle():
        num1 = 2
        def inner():
            nonlocal num1
            num1 = 3
            print(num1)
        inner()
        print(num1+3)
    middle()
    print(num1)
out()
print(num1)
'''

#global与nonlocal同时相遇，会摩擦出啥样的火花
# num1 = 4  #--》1
# def out():
#     global num1
#     num1 = 1
#     def middle():
#         num1 = 2 #---》3
#         def inner():
#             nonlocal num1
#             num1 = 3
#             print(num1)
#         inner()
#         print(num1+3)
#     middle()
#     print(num1)
# out()
# print(num1)


# 同级函数调用另一个函数的global关键字，则必须页global之后才可以对其进行更改等操作
def func():
    global num1
    num1 = 1
func() #只有调用函数之后global才有效
print(num1)

def func2():
    global num1
    num1 += 1
    print(num1)
func2()







#5-3wp
# n1 = 1
# def func():
#     #局部变量
#     print(n1)
#     def func2():
#         n2 = 2
#         print(n2)
#     func2()
#     #print(n2)  #局部变量仅在函数中，本句报错
#     print(n1)  #全局变量，本句ok
#
# func()


# num1 = 3
# def out():
#     num1 = 1
#     def inner():
#         num1 = 2
#         print(num1)
#     inner()  #print(num1)输出结果2
#     print(num1) #输出结果1
# out()
# print(num1) #输出结果3


# n1 = 1 #伪全局变量
# def out():
#     print(n1)
#     # n1 += 1
#     # print(n1)
# #调用函数
# out()
# n1 += 1
# print(n1)


# #真正的全局变量
# n1 = 1 #全局变量
# def out():
#     global n1 #真伪关键在于是否使用global
#     n1 += 9
#     print(n1)
# #调用函数
# out()
# print(n1)

#global之后的变量在哪里都可以使用

# def out():
#     def inner():
#         global num1
#         num1 = 1
#     inner()
#     print(num1+2)  #输出结果3
# #调用外层函数
# out()
# print(num1) #输出结果1


# n1 = 1
# def out():
#     n1 = 2
#     def inner():
#         global n1
#         n1 = 3
#     inner()
#     print(n1) #对应n1=2
# #调用外层函数
# out()
# print(n1) #3



# #nonlocal关键字只是对上一层变量进行更改，提升为相对全局变量
# n1 = 1
# def out():
#     n1 = 2 #没有被nonlocal更改
#     def middle():
#         n1 = 3 #被nonlocal更改
#         def inner():
#             nonlocal n1
#             n1 = 4
#             print(n1)
#         inner()
#         print(n1+5) #此时n1=4(被nonlocal更改)
#     middle()
#     print(n1) #n1=2没有被nonlocal更改
# out()
# # print(n1)


# # #global与nonlocal同时相遇，会摩擦出啥样的火花
# n1 = 1 #--→2
# def out():
#     global n1
#     n1 = 2
#     def middle():
#         n1 = 3 #--→4
#         def inner():
#             nonlocal n1
#             n1 = 4
#             print(n1) #4
#         inner()
#         print(n1+3) #7(4+3)
#     middle()
#     print(n1) #2
# out()
# print(n1) #2



# 同级函数调用另一个函数的global关键字，则必须页global之后才可以对其进行更改等操作
def f():
    global n1
    n1 = 1
f() #只有调用函数之后global才有效
print(n1)


def func2():
    global n1
    n1 += 1
    print(n1)
func2()







#5-4
#locals()，globals()
#获取当前的局部变量
'''
d = 4
def func():
    def func2():
        e = 5
    func2()
    a = 1
    b = 2
    result = locals()
    c = 3
    print(result)
func()
'''
#globals() 获取全局变量
'''
num1 = 1
def func():
    global num2
    num2 = 2
    num3 = 3
    result = globals()
    num4 = 4
    print(result)
#调用函数
func()
'''
#globals()可以动态的创建全局变量（不建议用）
'''
num1 = 1
def func():
    num2 = 2
    num3 = 3
    result = globals()
    result["num5"] = 5
    num4 = 4
    print(result)
#调用函数
func()
'''
#写一个程序：按顺序输出1-30之间的所有偶数，输出结束后输出：程序执行结束！
'''
for i in range(1,31):
    if i % 2 == 1:
        continue
    print(i)
print("程序执行结束")
'''
#写一个函数，求1-100之间所有整数之和
'''
def func():
    i = 0
    for j in range(1,101):
        i += j
    print(i)
func()
'''



#写一个函数，求 1-n 之间所有的整数之和（n是大于等于1的未知整数）
'''
def func(n):
    i = 0
    for j in range(1,n+1):
        i += j
    print(i)
func(100)
'''
# 斐波那契数列
i = 1
n = 0
while i < 1000:
    n , i = i , n + i
    # n 的值是1，i也是1
    # 1,i--》2
    # 2 ， i -->3
    # 3 ,  i ---》 5
    # 5    ,  8
    print(n)






#5-4wp
#locals()，globals()
#获取当前的局部变量

# #locals() 函数会以字典类型返回当前位置的全部局部变量。
# d = 4
# def func():
#     def func2():
#         e = 5
#     func2()
#     a = 1
#     b = 2
#     result = locals()
#     c = 3
#     print(result)
# func()


# #globals() 获取全局变量
# #globals() 函数会以字典类型返回当前位置的全部全局变量。
# n1 = 1
# def func():
#     global n2
#     n2 = 2
#     n3 = 3
#     result = globals()
#     n4 = 4
#     print(result)
# #调用函数
# func()

# #globals()可以动态的创建全局变量（不建议用）
# n1 = 1
# def func():
#     n2 = 2
#     n3 = 3
#     result = globals()
#     result["n5"] = 5
#     n4 = 4
#     print(result)
# #调用函数
# func()



# #写一个程序：按顺序输出1-30之间的所有偶数，输出结束后输出：程序执行结束！
# for i in range(1,31):
#     if i % 2 == 1:
#         continue
#     print(i)
# print("程序执行结束")

# #写一个函数，求1-100之间所有整数之和
# def func():
#     i = 0
#     for j in range(1,101):
#         i += j
#     print(i)
# func()


# #写一个函数，求 1-n 之间所有的整数之和（n是大于等于1的未知整数）
# def func(n):
#     i = 0
#     for j in range(1,n+1):
#         i += j
#     print(i)
# func(100)


# # 斐波那契数列
# i = 1
# n = 0
# while i < 1000:
#     n , i = i , n + i
#     # n 的值是1，i也是1
#     # 1,i--》2
#     # 2 ， i -->3
#     # 3 ,  i ---》 5
#     # 5    ,  8
#     print(n)



# a = 1
# b = 1
# c = a + b
# d = b + c
# e = c + d
# f = d + e

# n2 = 0
# n1 = 1
# n2 = n1      #1
# n3 = n2 + n1 #1+1=2
# n4 = n3 + n2 #2+1=3
# n5 = n4 + n3 #3+2=5
# n6 = n5 + n4 #5+3=8

n = 0
i = 1
while n<1000:
    n = n + i
    i = n - i
    print(n)










